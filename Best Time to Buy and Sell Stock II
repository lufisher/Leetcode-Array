Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete as many transactions as you like
(ie, buy one and sell one share of the stock multiple times). However, you may not engage in multi
ple transactions at the same time (ie, you must sell the stock before you buy again).

//方法一：如果把股票价格画出来，我们会发现，无论买卖多少次
//最好的收益，肯定是各个波谷和波峰的差的和。所以我们不用管是怎么买卖，而只需要管
//各个波谷和波峰的差值之和即可
class Solution {
public:
	int maxProfit(vector<int>& prices) {
		int i = 0;
		int valley = prices[0];
		int peak = prices[0];
		int maxprofit = 0;
		while (i < prices.size() - 1) {
			while (i < prices.size() - 1 && prices[i] >= prices[i + 1])
				++i;
			valley = prices[i];
			while (i < prices.size() - 1 && prices[i] <= prices[i + 1])
				++i;
			peak = prices[i];
			maxprofit = maxprofit + peak - valley;
		}
		return maxprofit;
	}
};
//方法二：跟方法一类似，我们为了拿到最高的收益，必定是每次都是低卖进高卖出，这样把所有上升趋势的相加即可。注意，可以在同一天卖出和买进的
class Solution {
public:
	 int maxProfit(vector<int> prices) {
		int maxprofit = 0;
		for (int i = 1; i < prices.size(); i++) {
			if (prices[i] > prices[i - 1])
				maxprofit += prices[i] - prices[i - 1];
		}
		return maxprofit;
	}
};
