Given an array of 2n integers, your task is to group these integers into n pairs of integer, say (a1, b1), (a2, b2), ..., (an, bn) which makes sum of min(ai, bi) for all i from 1 to n as large as possible.

Example 1:
Input: [1,4,3,2]

Output: 4
Explanation: n is 2, and the maximum sum of pairs is 4 = min(1, 2) + min(3, 4).
Note:
n is a positive integer, which is in the range of [1, 10000].
All the integers in the array will be in the range of [-10000, 10000].

//方法一：先对数组进行排序，然后第一，第三，。。。，第n-1个数据的值就是结果 O(nlogn)
//为什么需要这么做呢？这个题目其实不是很直观。这个题目意思是，一个数组，两两分组，要让每组的min加起来最大
//这就意味着，要让尽量小的数加在一起，从而不会让尽量大的数牺牲，让尽量大的数能出现在最终相加的结果中
class solution {
public:
	int arrayPairSum(vector<int> &nums) {
		auto arraySize = nums.size();
		int result = 0;
		sort(nums.begin(), nums.end());//sort()改进的快速排序，从小到大，O(nlogn)
		for (vector<int>::size_type i = 0;i<arraySize; i=i+2)
			result = result + nums[i];
		return result;
	}
};
