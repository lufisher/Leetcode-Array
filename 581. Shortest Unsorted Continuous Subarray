Given an integer array, you need to find one continuous subarray that if you only sort this subarray in ascending order, then the whole array will be sorted in ascending order, too.

You need to find the shortest such subarray and output its length.

Example 1:

Input: [2, 6, 4, 8, 10, 9, 15]
Output: 5
Explanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.

Note:

    Then length of the input array is in range [1, 10,000].
    The input array may contain duplicates, so ascending order here means <=.
//最容易想到的方法
class Solution {
public:
    int findUnsortedSubarray(vector<int>& nums) {//一个投机取巧的方法：先排序再和原数组比较
        int front=0,back=-1;//这样取值是保证在没有符合的子串的情况下
        vector<int> com=nums;
        sort(com.begin(),com.end());
        for(int i=0;i<nums.size();++i)
            if(nums[i]!=com[i]){
                front=i;
                break;
            }
        for(int i=nums.size()-1;i>=0;--i)
            if(nums[i]!=com[i]){
                back=i;
                break;
            }
        return back-front+1;
    }
};
