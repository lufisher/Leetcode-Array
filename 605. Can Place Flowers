Suppose you have a long flowerbed in which some of the plots are planted and some are not. However, flowers cannot be planted in adjacent plots - they would compete for water and both would die.

Given a flowerbed (represented as an array containing 0 and 1, where 0 means empty and 1 means not empty), and a number n, return if n new flowers can be planted in it without violating the no-adjacent-flowers rule.

Example 1:

Input: flowerbed = [1,0,0,0,1], n = 1
Output: True

Example 2:

Input: flowerbed = [1,0,0,0,1], n = 2
Output: False

//方法一：传统的逐个检测方法，注意要在输入数组的前后各加入一个0，这样就避免了繁琐的检查条件
class Solution {
public:
    bool canPlaceFlowers(vector<int>& flowerbed, int n) {
        int allownum=0;
        flowerbed.push_back(0);
        flowerbed.insert(flowerbed.begin(),0);
        for(int i=1;i<flowerbed.size()-1;)//原本是花圃长度大于等于3才能这样，但是由于在花圃开始和结尾加入了0，因此所有情况都符合了
            if(flowerbed[i]==0&&flowerbed[i-1]==0&&flowerbed[i+1]==0){
                ++allownum;
                i=i+2;
            }
            else
                ++i;
        return allownum>=n;
    }
};
