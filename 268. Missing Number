Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, find the one that is missing from the array.

Example 1

Input: [3,0,1]
Output: 2
Example 2

Input: [9,6,4,2,3,5,7,0,1]
Output: 8

Note:
Your algorithm should run in linear runtime complexity. Could you implement it using only constant extra space complexity?
//方法一：最简单的就是用哈希表
class Solution {
public:
	int missingNumber(vector<int>& nums) {
		vector<int> vec(nums.size()+1,0);
		for (int i = 0; i < nums.size(); ++i)
			vec[nums[i]] = 1;
		for (int i = 0; i < vec.size(); ++i)
			if (vec[i] == 0)
				return i;
	}
};
//方法二：也可以使用集合或者map，这个就不赘述了
//方法三：也可以使用先排序后找，也不赘述
//方法四：这里介绍一个新方法，就是使用异或运算。异或运算可以用于寻找元素
Intuition

We can harness the fact that XOR is its own inverse to find the missing element in linear time.

Algorithm

Because we know that nums contains nn numbers and that it is missing exactly one number on the 
range [0..n-1][0..n−1], we know that nn definitely replaces the missing number in nums. Therefore, 
if we initialize an integer to nn and XOR it with every index and value, we will be left with the 
missing number. Consider the following example (the values have been sorted for intuitive convenience, but need not be):

Index	0	1	2	3
Value	0	1	3	4
missing=4∧(0∧0)∧(1∧1)∧(2∧3)∧(3∧4)=(4∧4)∧(0∧0)∧(1∧1)∧(3∧3)∧2=0∧0∧0∧0∧2=2
