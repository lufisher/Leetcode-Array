Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.

Note:
You may assume that nums1 has enough space (size that is greater or
equal to m + n) to hold additional elements from nums2. The number of
elements initialized in nums1 and nums2 are m and n respectively.

/*class Solution {//方法一：投机取巧的方法，先随便混合然后快速排序然后输出
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        vector<int> inter;
        for(int i=0;i<m;++i)
            inter.push_back(nums1[i]);
        for(int i=0;i<n;++i)
            inter.push_back(nums2[i]);
        sort(inter.begin(),inter.end());
        nums1=inter;
    }
};*/
class Solution {//传统的方法，也就是通过逐一判断把nums2元素放进nums1中，因为nums1空间足够，所以直接一步到位即可
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        if(nums1.size()==0)
            nums1=nums2;
        if(nums2.size()==0)
            return;
        int i=m-1,j=n-1,k=m+n-1;//分别标注nums1，nums2和新数组的结尾位置
        /*while(k>=0)不能用这样的判断条件！因为极有可能数组越界，比较结果不正确
            if(nums1[i]>=nums2[j])
                nums1[k--]=nums1[i--];
            else
                nums1[k--]=nums2[j--];*/
        while(i>=0&&j>=0)
            if(nums1[i]>=nums2[j])
                nums1[k--]=nums1[i--];
            else
                nums1[k--]=nums2[j--];
        while(j>=0)
            nums1[k--]=nums2[j--];
    }
};
