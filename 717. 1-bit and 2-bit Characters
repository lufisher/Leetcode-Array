We have two special characters. The first character can be represented by one bit 0. The second character can be represented by two bits (10 or 11).

Now given a string represented by several bits. Return whether the last character must be a one-bit character or not. The given string will always end with a zero.

Example 1:
Input: 
bits = [1, 0, 0]
Output: True
Explanation: 
The only way to decode it is two-bit character and one-bit character. So the last character is one-bit character.
Example 2:
Input: 
bits = [1, 1, 1, 0]
Output: False
Explanation: 
The only way to decode it is two-bit character and two-bit character. So the last character is NOT one-bit character.
//方法一：从头遍历bits，因为假设A（0），B（10,11），如果遇到一个1开头的，必然是B的编码，0开头的，必然是A的编码。这样的话如果最后一个是B，那就认为是false
//注意的是，这题里面，解码获得的结果必然是唯一的！并不是会有多种解码的结果可能！
class Solution {
public:
	bool isOneBitCharacter(vector<int>& bits) {
		bool judge;
		for(int i=0;i<bits.size();)
			if (bits[i] == 1) {
				i += 2;
				judge = false;
			}
			else {
				judge = true;
				++i;
			}
		return judge;
	}
};
